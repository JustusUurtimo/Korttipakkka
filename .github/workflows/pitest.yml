#
# Run pitest and update github in a single step. This simple flow can be used for projects where all PRs come from
# branches in the repo. For OSS projects where PRs come from forks, the more complex two stage flow must be used
#
name: Pitest
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # Only run on PRs from the repo. PRs from forks will fail due to lack of permissions and
    # must use the two stage process
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          # important to set a fetch depth of 2. By default the checkout action make no history available
          fetch-depth: 2
#      - name: Setup Java JDK
#        uses: actions/setup-java@v1.4.3
#        with:
#          java-version: 11
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Check Gradle Version
        run: ./gradlew --version
      - name: run pitest
        run: ./gradlew  build :app:pitest -Dfeatures="+GIT"
        env:
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#jobs:
#    build:

#      runs-on: ubuntu-latest

#      steps:
#        - uses: actions/checkout@v4
#        - name: set up JDK 17
#          uses: actions/setup-java@v4
#          with:
#            java-version: '17'
#            distribution: 'temurin'
#            cache: gradle

#        - name: Grant execute permission for gradlew
#          run: chmod +x gradlew
#        - name: Check Gradle Version
#          run: ./gradlew --version